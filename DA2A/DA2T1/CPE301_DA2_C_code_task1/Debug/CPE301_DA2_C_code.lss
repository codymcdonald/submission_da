
CPE301_DA2_C_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000060  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB = 0xFF; // Set all PORTB out
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	TCCR1B = 0x0D; // Set pre-scaler to 1024 and CTC Mode
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 0x1A8C; //  Set top of OCR1A to 2 second period
  8a:	8c e8       	ldi	r24, 0x8C	; 140
  8c:	9a e1       	ldi	r25, 0x1A	; 26
  8e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  92:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	int flag = 0;
	int flag2 = 1;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
			TIFR1 = 0x04;
			OCR1A = 0x11B2;
			flag2 = 1;
		}
		else if(flag== 0x04 && flag2 == 1){
			PORTB = 0b00110100; // Light up LED 5
  9a:	14 e3       	ldi	r17, 0x34	; 52
			TIFR1 = 0x04;
  9c:	24 e0       	ldi	r18, 0x04	; 4
			OCR1A = 0x1A8C;
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	cc e8       	ldi	r28, 0x8C	; 140
  a4:	da e1       	ldi	r29, 0x1A	; 26
			flag2 = 0;
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	a0 e0       	ldi	r26, 0x00	; 0

	// Square wave is now running.
	while(1){
		flag = TIFR1 & 0x04;
		if (flag == 0x04 && flag2 == 0){
			PORTB ^= 0b00001000; // Light up LED 5
  aa:	58 e0       	ldi	r21, 0x08	; 8
			TIFR1 = 0x04;
			OCR1A = 0x11B2;
  ac:	62 eb       	ldi	r22, 0xB2	; 178
  ae:	71 e1       	ldi	r23, 0x11	; 17
			flag2 = 1;
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
	int flag2 = 1;

	// Square wave is now running.
	while(1){
		flag = TIFR1 & 0x04;
		if (flag == 0x04 && flag2 == 0){
  b4:	b2 9b       	sbis	0x16, 2	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x34>
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	49 f4       	brne	.+18     	; 0xce <main+0x4e>
			PORTB ^= 0b00001000; // Light up LED 5
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	85 27       	eor	r24, r21
  c0:	85 b9       	out	0x05, r24	; 5
			TIFR1 = 0x04;
  c2:	26 bb       	out	0x16, r18	; 22
			OCR1A = 0x11B2;
  c4:	71 83       	std	Z+1, r23	; 0x01
  c6:	60 83       	st	Z, r22
			flag2 = 1;
  c8:	84 2f       	mov	r24, r20
  ca:	93 2f       	mov	r25, r19
  cc:	f3 cf       	rjmp	.-26     	; 0xb4 <main+0x34>
		}
		else if(flag== 0x04 && flag2 == 1){
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	81 f7       	brne	.-32     	; 0xb4 <main+0x34>
			PORTB = 0b00110100; // Light up LED 5
  d4:	15 b9       	out	0x05, r17	; 5
			TIFR1 = 0x04;
  d6:	26 bb       	out	0x16, r18	; 22
			OCR1A = 0x1A8C;
  d8:	d1 83       	std	Z+1, r29	; 0x01
  da:	c0 83       	st	Z, r28
			flag2 = 0;
  dc:	8b 2f       	mov	r24, r27
  de:	9a 2f       	mov	r25, r26
  e0:	e9 cf       	rjmp	.-46     	; 0xb4 <main+0x34>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
