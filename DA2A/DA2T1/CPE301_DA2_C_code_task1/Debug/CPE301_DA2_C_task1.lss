
CPE301_DA2_C_task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000060  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB |= (1<<2);		// Set all PORTB out
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR1B = 0x0D;		// Set pre-scaler to 1024 and CTC Mode
  82:	8d e0       	ldi	r24, 0x0D	; 13
  84:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 0x1A8C;		// Set top of OCR1A to 0.435s
  88:	8c e8       	ldi	r24, 0x8C	; 140
  8a:	9a e1       	ldi	r25, 0x1A	; 26
  8c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  90:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	int flag = 0;       // set flag variables
	int flag2 = 1;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
			OCR1A = 0x11B2;   //set delay for LED off
			flag2 = 1;
		}
		else if(flag== 0x04 && flag2 == 1){
			PORTB |= (1<<2); // turn on LED
			TIFR1 = 0x04;	 // reset clear flag
  98:	24 e0       	ldi	r18, 0x04	; 4
			OCR1A = 0x1A8C;  // set delay for LED on
  9a:	e8 e8       	ldi	r30, 0x88	; 136
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	cc e8       	ldi	r28, 0x8C	; 140
  a0:	da e1       	ldi	r29, 0x1A	; 26
			flag2 = 0;
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
	while(1){
		flag = TIFR1 & 0x04;
		if (flag == 0x04 && flag2 == 0){
			PORTB &= ~(1<<2); //turn off LED
			TIFR1 = 0x04;	  //reset clear flag
			OCR1A = 0x11B2;   //set delay for LED off
  a6:	62 eb       	ldi	r22, 0xB2	; 178
  a8:	71 e1       	ldi	r23, 0x11	; 17
			flag2 = 1;
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
	int flag2 = 1;

	// Run loop for 60% DC
	while(1){
		flag = TIFR1 & 0x04;
		if (flag == 0x04 && flag2 == 0){
  ae:	b2 9b       	sbis	0x16, 2	; 22
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x2e>
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	39 f4       	brne	.+14     	; 0xc4 <main+0x44>
			PORTB &= ~(1<<2); //turn off LED
  b6:	2a 98       	cbi	0x05, 2	; 5
			TIFR1 = 0x04;	  //reset clear flag
  b8:	26 bb       	out	0x16, r18	; 22
			OCR1A = 0x11B2;   //set delay for LED off
  ba:	71 83       	std	Z+1, r23	; 0x01
  bc:	60 83       	st	Z, r22
			flag2 = 1;
  be:	84 2f       	mov	r24, r20
  c0:	93 2f       	mov	r25, r19
  c2:	f5 cf       	rjmp	.-22     	; 0xae <main+0x2e>
		}
		else if(flag== 0x04 && flag2 == 1){
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 05       	cpc	r25, r1
  c8:	91 f7       	brne	.-28     	; 0xae <main+0x2e>
			PORTB |= (1<<2); // turn on LED
  ca:	2a 9a       	sbi	0x05, 2	; 5
			TIFR1 = 0x04;	 // reset clear flag
  cc:	26 bb       	out	0x16, r18	; 22
			OCR1A = 0x1A8C;  // set delay for LED on
  ce:	d1 83       	std	Z+1, r29	; 0x01
  d0:	c0 83       	st	Z, r28
			flag2 = 0;
  d2:	8a 2f       	mov	r24, r26
  d4:	95 2f       	mov	r25, r21
  d6:	eb cf       	rjmp	.-42     	; 0xae <main+0x2e>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
