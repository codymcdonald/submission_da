
CPE301_DA4B_task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ee  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer_init>:
	}
}

void timer_init(void){
	//TCCR1A 
	TCCR1B |=(1<<WGM12)|(1<<CS11); //CTC MODE prescaler = 8
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8a 60       	ori	r24, 0x0A	; 10
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <ADC_init>:
}

void ADC_init(void){
	DIDR0 = 0x1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = (1<<REFS0);
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA |=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	87 68       	ori	r24, 0x87	; 135
  b0:	80 83       	st	Z, r24
	ADCSRB = 0x0;
  b2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  b6:	08 95       	ret

000000b8 <main>:
void ADC_init();
void timer_init();


int main(void){
	timer_init();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <timer_init>
	ADC_init();
  bc:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_init>
	int delay = 1000;

DDRB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
DDRC = 0;
  c4:	17 b8       	out	0x07, r1	; 7
PORTB = 0;	
  c6:	15 b8       	out	0x05, r1	; 5
	
	while(1){
		ADCSRA|=(1<<ADSC);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
		while ((ADCSRA&(1<<ADIF))==0);
		ADCVal = ADC & 0x03FF;
  cc:	c8 e7       	ldi	r28, 0x78	; 120
  ce:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = 10*ADCVal;
  d0:	a8 e8       	ldi	r26, 0x88	; 136
  d2:	b0 e0       	ldi	r27, 0x00	; 0
DDRB = 0xFF;
DDRC = 0;
PORTB = 0;	
	
	while(1){
		ADCSRA|=(1<<ADSC);
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
		while ((ADCSRA&(1<<ADIF))==0);
  da:	80 81       	ld	r24, Z
  dc:	84 ff       	sbrs	r24, 4
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x22>
		ADCVal = ADC & 0x03FF;
  e0:	88 81       	ld	r24, Y
  e2:	99 81       	ldd	r25, Y+1	; 0x01
  e4:	93 70       	andi	r25, 0x03	; 3
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = 10*ADCVal;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f6:	9c 01       	movw	r18, r24
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	82 0f       	add	r24, r18
 10a:	93 1f       	adc	r25, r19
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
		
		
				PORTB |= (1<<PB0);
 112:	28 9a       	sbi	0x05, 0	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 114:	b1 9b       	sbis	0x16, 1	; 22
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x5c>
				TIFR1 |= (1<<OCF1A);
 118:	b1 9a       	sbi	0x16, 1	; 22
				PORTB &= ~(1<<PB0);
 11a:	28 98       	cbi	0x05, 0	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 11c:	b1 9b       	sbis	0x16, 1	; 22
 11e:	fe cf       	rjmp	.-4      	; 0x11c <main+0x64>
				TIFR1 |= (1<<OCF1A);
 120:	b1 9a       	sbi	0x16, 1	; 22
				
				
				PORTB |= (1<<PB1);
 122:	29 9a       	sbi	0x05, 1	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 124:	b1 9b       	sbis	0x16, 1	; 22
 126:	fe cf       	rjmp	.-4      	; 0x124 <main+0x6c>
				TIFR1 |= (1<<OCF1A);
 128:	b1 9a       	sbi	0x16, 1	; 22
				PORTB &= ~(1<<PB1);
 12a:	29 98       	cbi	0x05, 1	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 12c:	b1 9b       	sbis	0x16, 1	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x74>
				TIFR1 |= (1<<OCF1A);
 130:	b1 9a       	sbi	0x16, 1	; 22
				
				PORTB |= (1<<PB2);
 132:	2a 9a       	sbi	0x05, 2	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 134:	b1 9b       	sbis	0x16, 1	; 22
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0x7c>
				TIFR1 |= (1<<OCF1A);
 138:	b1 9a       	sbi	0x16, 1	; 22
				PORTB &= ~(1<<PB2);
 13a:	2a 98       	cbi	0x05, 2	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 13c:	b1 9b       	sbis	0x16, 1	; 22
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x84>
				TIFR1 |= (1<<OCF1A);
 140:	b1 9a       	sbi	0x16, 1	; 22
				
				PORTB |= (1<<PB3);
 142:	2b 9a       	sbi	0x05, 3	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 144:	b1 9b       	sbis	0x16, 1	; 22
 146:	fe cf       	rjmp	.-4      	; 0x144 <main+0x8c>
				TIFR1 |= (1<<OCF1A);
 148:	b1 9a       	sbi	0x16, 1	; 22
				PORTB &= ~(1<<PB3);
 14a:	2b 98       	cbi	0x05, 3	; 5
				while(!(TIFR1 & (1<<OCF1A)));
 14c:	b1 9b       	sbis	0x16, 1	; 22
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0x94>
				TIFR1 |= (1<<OCF1A);
 150:	b1 9a       	sbi	0x16, 1	; 22
			TIFR1 |= (1<<OCF1A);
			PORTB = 0x0C;
			while(!TIFR1 & (OCF1A));
			TIFR1 |= (1<<OCF1A);
			*/
	}
 152:	c0 cf       	rjmp	.-128    	; 0xd4 <main+0x1c>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
