
CPE301_DA1B_verification.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006db  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000611  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f6  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001df  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * Author : Cody
 */ 

#include <avr/io.h>

int main(void){
  80:	8f 92       	push	r8
  82:	9f 92       	push	r9
  84:	af 92       	push	r10
  86:	bf 92       	push	r11
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
//initialize some indices for loops
int i = 0;
int i2 = 0;

    //Begin loop for inserting numbers into the sorting
    for (i=0;i<=255;i++){ 
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
int ySum = 0;
int zSum = 0;

//initialize some indices for loops
int i = 0;
int i2 = 0;
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	f0 e0       	ldi	r31, 0x00	; 0
x = 0x0200;
y = 0x0400;
z = 0x0600;

int ySum = 0;
int zSum = 0;
  a0:	c1 2c       	mov	r12, r1
  a2:	d1 2c       	mov	r13, r1
// set addresses for each of the address registers
x = 0x0200;
y = 0x0400;
z = 0x0600;

int ySum = 0;
  a4:	e1 2c       	mov	r14, r1
  a6:	f1 2c       	mov	r15, r1
int *z ;

// set addresses for each of the address registers
x = 0x0200;
y = 0x0400;
z = 0x0600;
  a8:	00 e0       	ldi	r16, 0x00	; 0
  aa:	16 e0       	ldi	r17, 0x06	; 6
int *y ;
int *z ;

// set addresses for each of the address registers
x = 0x0200;
y = 0x0400;
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d4 e0       	ldi	r29, 0x04	; 4
int *x ;
int *y ;
int *z ;

// set addresses for each of the address registers
x = 0x0200;
  b0:	a1 2c       	mov	r10, r1
  b2:	68 94       	set
  b4:	bb 24       	eor	r11, r11
  b6:	b1 f8       	bld	r11, 1
			*x = i; // let x value equal i
			x++;	// set x up for next value
			i2++;	// increase index
			
			//Check if divisible by 3
			if (i%3 == 0){ //if divisible, store into y
  b8:	0f 2e       	mov	r0, r31
  ba:	f3 e0       	ldi	r31, 0x03	; 3
  bc:	8f 2e       	mov	r8, r31
  be:	91 2c       	mov	r9, r1
  c0:	f0 2d       	mov	r31, r0
  c2:	1e c0       	rjmp	.+60     	; 0x100 <main+0x80>
int i = 0;
int i2 = 0;

    //Begin loop for inserting numbers into the sorting
    for (i=0;i<=255;i++){ 
		if (i <= 10 || i >= 255 ){ //decide whether the number is larger than 255 or less than 10
  c4:	c9 01       	movw	r24, r18
  c6:	0b 97       	sbiw	r24, 0x0b	; 11
  c8:	84 3f       	cpi	r24, 0xF4	; 244
  ca:	91 05       	cpc	r25, r1
  cc:	c8 f4       	brcc	.+50     	; 0x100 <main+0x80>
			//do nothing
		}
		else if(i2 < 99){ // store only 99 numbers
  ce:	e3 36       	cpi	r30, 0x63	; 99
  d0:	f1 05       	cpc	r31, r1
  d2:	b4 f4       	brge	.+44     	; 0x100 <main+0x80>
			*x = i; // let x value equal i
  d4:	d5 01       	movw	r26, r10
  d6:	2d 93       	st	X+, r18
  d8:	3d 93       	st	X+, r19
  da:	5d 01       	movw	r10, r26
			x++;	// set x up for next value
			i2++;	// increase index
  dc:	31 96       	adiw	r30, 0x01	; 1
			
			//Check if divisible by 3
			if (i%3 == 0){ //if divisible, store into y
  de:	c9 01       	movw	r24, r18
  e0:	b4 01       	movw	r22, r8
  e2:	0e 94 9a 00 	call	0x134	; 0x134 <__divmodhi4>
  e6:	89 2b       	or	r24, r25
  e8:	29 f4       	brne	.+10     	; 0xf4 <main+0x74>
				*y=i;
  ea:	29 93       	st	Y+, r18
  ec:	39 93       	st	Y+, r19
				y++;
				ySum = ySum +i; // add all values of y
  ee:	e2 0e       	add	r14, r18
  f0:	f3 1e       	adc	r15, r19
  f2:	06 c0       	rjmp	.+12     	; 0x100 <main+0x80>
			}
			else{		// otherwise store into z
				*z=i;
  f4:	d8 01       	movw	r26, r16
  f6:	2d 93       	st	X+, r18
  f8:	3d 93       	st	X+, r19
  fa:	8d 01       	movw	r16, r26
				z++;
				zSum = zSum +i; // add all values of z
  fc:	c2 0e       	add	r12, r18
  fe:	d3 1e       	adc	r13, r19
			}
		}		
	//output the values for ySum and zSum and store them in the next spot of memory
	*y = ySum;
 100:	f9 82       	std	Y+1, r15	; 0x01
 102:	e8 82       	st	Y, r14
	*z = zSum;
 104:	d8 01       	movw	r26, r16
 106:	cd 92       	st	X+, r12
 108:	dc 92       	st	X, r13
//initialize some indices for loops
int i = 0;
int i2 = 0;

    //Begin loop for inserting numbers into the sorting
    for (i=0;i<=255;i++){ 
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	21 15       	cp	r18, r1
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	3b 07       	cpc	r19, r27
 114:	b9 f6       	brne	.-82     	; 0xc4 <main+0x44>
	*y = ySum;
	*z = zSum;
	}
	
	return 0;
}
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	bf 90       	pop	r11
 12c:	af 90       	pop	r10
 12e:	9f 90       	pop	r9
 130:	8f 90       	pop	r8
 132:	08 95       	ret

00000134 <__divmodhi4>:
 134:	97 fb       	bst	r25, 7
 136:	07 2e       	mov	r0, r23
 138:	16 f4       	brtc	.+4      	; 0x13e <__divmodhi4+0xa>
 13a:	00 94       	com	r0
 13c:	07 d0       	rcall	.+14     	; 0x14c <__divmodhi4_neg1>
 13e:	77 fd       	sbrc	r23, 7
 140:	09 d0       	rcall	.+18     	; 0x154 <__divmodhi4_neg2>
 142:	0e 94 ae 00 	call	0x15c	; 0x15c <__udivmodhi4>
 146:	07 fc       	sbrc	r0, 7
 148:	05 d0       	rcall	.+10     	; 0x154 <__divmodhi4_neg2>
 14a:	3e f4       	brtc	.+14     	; 0x15a <__divmodhi4_exit>

0000014c <__divmodhi4_neg1>:
 14c:	90 95       	com	r25
 14e:	81 95       	neg	r24
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	08 95       	ret

00000154 <__divmodhi4_neg2>:
 154:	70 95       	com	r23
 156:	61 95       	neg	r22
 158:	7f 4f       	sbci	r23, 0xFF	; 255

0000015a <__divmodhi4_exit>:
 15a:	08 95       	ret

0000015c <__udivmodhi4>:
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	51 e1       	ldi	r21, 0x11	; 17
 162:	07 c0       	rjmp	.+14     	; 0x172 <__udivmodhi4_ep>

00000164 <__udivmodhi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a6 17       	cp	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	10 f0       	brcs	.+4      	; 0x172 <__udivmodhi4_ep>
 16e:	a6 1b       	sub	r26, r22
 170:	b7 0b       	sbc	r27, r23

00000172 <__udivmodhi4_ep>:
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	5a 95       	dec	r21
 178:	a9 f7       	brne	.-22     	; 0x164 <__udivmodhi4_loop>
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
