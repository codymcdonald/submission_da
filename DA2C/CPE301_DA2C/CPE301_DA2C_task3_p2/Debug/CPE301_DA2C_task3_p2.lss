
CPE301_DA2C_task3_p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000158  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fb  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000641  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027a  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000167d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int cycleMatch = 255;

//TCNT FOR 1.25s = 19531.25. Overflow count = 77
int main(void){
	//initialize registers
	DDRB |= (1<<2)|(1<<5);		//set portb 2 to output
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	84 62       	ori	r24, 0x24	; 36
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<2)|(1<<5);		//set pb2 to high
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	84 62       	ori	r24, 0x24	; 36
  b0:	85 b9       	out	0x05, r24	; 5
	DDRC &= (0<<2);		//set ddrc to input
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);		//set portc2 to low
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	88 b9       	out	0x08, r24	; 8
	
	//Set modes
	TCCR0A |= (1<<WGM01);	//set ctc mode on OCRA
  ba:	84 b5       	in	r24, 0x24	; 36
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
  c0:	85 b5       	in	r24, 0x25	; 37
  c2:	85 60       	ori	r24, 0x05	; 5
  c4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);	//enable compare interrupts
  c6:	ee e6       	ldi	r30, 0x6E	; 110
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	OCR0A = cycleMatch;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d4:	87 bd       	out	0x27, r24	; 39

	sei();			//enable interrupt
  d6:	78 94       	sei
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			flag = 1;		//if pressed then turn on led	
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
	OCR0A = cycleMatch;

	sei();			//enable interrupt
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
  dc:	32 99       	sbic	0x06, 2	; 6
  de:	05 c0       	rjmp	.+10     	; 0xea <main+0x44>
		{
			flag = 1;		//if pressed then turn on led	
  e0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag+0x1>
  e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <main+0x36>
		}
		else {
			PORTB |= (1<<2);		//if not pressed then keep led off
  ea:	2a 9a       	sbi	0x05, 2	; 5
			flag = 0;
  ec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
  f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <main+0x36>

000000f6 <__vector_14>:
		}
	}
	return 0;
}

ISR(TIMER0_COMPA_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	
	int ovFlowCount = 0;
	int matchCheck = 0;
	int delayCount = 77;		//amount of overflows to reach desired delay

	if (flag == 1){
 104:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
 108:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	d9 f4       	brne	.+54     	; 0x146 <__vector_14+0x50>
		flag = 0;	//toggle flag
 110:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 114:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
		PORTB &= ~(1<<2);
 118:	2a 98       	cbi	0x05, 2	; 5
		TCNT0 = 0;				//start counter at 0
 11a:	16 bc       	out	0x26, r1	; 38
		while(matchCount <= delayCount ){
 11c:	08 c0       	rjmp	.+16     	; 0x12e <__vector_14+0x38>
			matchCheck = TIFR0 & 0x02;	//variable to check if compare is met
			if (matchCheck == 0x02){
 11e:	a9 9b       	sbis	0x15, 1	; 21
 120:	0a c0       	rjmp	.+20     	; 0x136 <__vector_14+0x40>
				matchCount ++;		//increase match count
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				TIFR0 |= (1<<OCF0A); //reset sreg flag
 12c:	a9 9a       	sbi	0x15, 1	; 21

	if (flag == 1){
		flag = 0;	//toggle flag
		PORTB &= ~(1<<2);
		TCNT0 = 0;				//start counter at 0
		while(matchCount <= delayCount ){
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 136:	8e 34       	cpi	r24, 0x4E	; 78
 138:	91 05       	cpc	r25, r1
 13a:	8c f3       	brlt	.-30     	; 0x11e <__vector_14+0x28>
			if (matchCheck == 0x02){
				matchCount ++;		//increase match count
				TIFR0 |= (1<<OCF0A); //reset sreg flag
			}
		}
		matchCount = 0;		//reset match count
 13c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		PORTB |= (1<<2); //turn off LED
 144:	2a 9a       	sbi	0x05, 2	; 5
		
	}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
