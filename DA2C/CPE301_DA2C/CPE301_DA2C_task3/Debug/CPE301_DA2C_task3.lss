
CPE301_DA2C_task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000160  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f3  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000987  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025c  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB |= (1<<2)|(1<<5);			// Set all PORTB out
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	84 62       	ori	r24, 0x24	; 36
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);		//turn off LED 5
  ac:	2d 9a       	sbi	0x05, 5	; 5
	TCCR0A |= (1<<WGM01);	//set ctc mode on OCRA
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);	//enable compare interrupts
  ba:	ee e6       	ldi	r30, 0x6E	; 110
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	OCR0A = cycleMatch;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c8:	87 bd       	out	0x27, r24	; 39
	sei();					//enable interrupts
  ca:	78 94       	sei
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x26>

000000ce <__vector_14>:
	
	while(1);				//infinite loop
	
}

ISR(TIMER0_COMPA_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
		matchCount ++;
  e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
  e4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
  ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		if (flag == 1 && matchCount == dc40){
  f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <flag>
  f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <flag+0x1>
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	31 05       	cpc	r19, r1
  fe:	89 f4       	brne	.+34     	; 0x122 <__vector_14+0x54>
 100:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dc40>
 104:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dc40+0x1>
 108:	82 17       	cp	r24, r18
 10a:	93 07       	cpc	r25, r19
 10c:	f1 f4       	brne	.+60     	; 0x14a <__vector_14+0x7c>
			PORTB &= ~(1<<2);	//toggle LED
 10e:	2a 98       	cbi	0x05, 2	; 5
			matchCount = 0;	//reset overflow counter
 110:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 114:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			flag = 0;
 118:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag+0x1>
 11c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
 120:	14 c0       	rjmp	.+40     	; 0x14a <__vector_14+0x7c>
		}
		else if (flag == 0 && matchCount == dc60){
 122:	23 2b       	or	r18, r19
 124:	91 f4       	brne	.+36     	; 0x14a <__vector_14+0x7c>
 126:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <dc60>
 12a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <dc60+0x1>
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	59 f4       	brne	.+22     	; 0x14a <__vector_14+0x7c>
			PORTB |= (1<<2);	//toggle LED
 134:	2a 9a       	sbi	0x05, 2	; 5
			matchCount = 0;	//reset overflow counter
 136:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 13a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			flag = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <flag+0x1>
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
		}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
