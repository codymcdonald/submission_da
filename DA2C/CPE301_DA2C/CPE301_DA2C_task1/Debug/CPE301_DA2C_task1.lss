
CPE301_DA2C_task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB |= (1<<2)|(1<<5);		// led 2 and 5 to output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 62       	ori	r24, 0x24	; 36
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);
  86:	2d 9a       	sbi	0x05, 5	; 5
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37
	int ovCheck = 0;
	int flag = 1;
	int dc60 = 27; //overflow count to reach 6796
	int dc40 = 18; //overflow count to reach 4530

	TCNT0 = 0; //initialize clock
  8e:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
	
	//declare vital variables
	int ovFlowCount = 0;
	int ovCheck = 0;
	int flag = 1;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
	DDRB |= (1<<2)|(1<<5);		// led 2 and 5 to output
	PORTB |= (1<<5);
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
	
	//declare vital variables
	int ovFlowCount = 0;
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
		}
		else if(flag == 1 && ovFlowCount == dc60){
			PORTB |= (1<<2); // turn off LED
			TCNT0 = 0;		//reset counter
			ovFlowCount = 0; //reset ov counter
			flag = 0;
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
		
		if (flag == 0 && ovFlowCount == dc40){
			PORTB &= ~(1<<2); //turn on LED
			TCNT0 = 0;		//reset counter
			ovFlowCount = 0; //reset ov counter
			flag = 1;
  9c:	51 e0       	ldi	r21, 0x01	; 1
  9e:	40 e0       	ldi	r20, 0x00	; 0
	TCNT0 = 0; //initialize clock
	// Run loop for 60% DC
	while(1){
		ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
		
		if(ovCheck == 1){
  a0:	a8 9b       	sbis	0x15, 0	; 21
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x2a>
			ovFlowCount ++;
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
			TIFR0 |= (1<<TOV0); //reset overflow flag
  a8:	a8 9a       	sbi	0x15, 0	; 21
		}
		
		if (flag == 0 && ovFlowCount == dc40){
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	51 f4       	brne	.+20     	; 0xc2 <main+0x42>
  ae:	22 31       	cpi	r18, 0x12	; 18
  b0:	31 05       	cpc	r19, r1
  b2:	b1 f7       	brne	.-20     	; 0xa0 <main+0x20>
			PORTB &= ~(1<<2); //turn on LED
  b4:	2a 98       	cbi	0x05, 2	; 5
			TCNT0 = 0;		//reset counter
  b6:	16 bc       	out	0x26, r1	; 38
			ovFlowCount = 0; //reset ov counter
			flag = 1;
  b8:	85 2f       	mov	r24, r21
  ba:	94 2f       	mov	r25, r20
		}
		
		if (flag == 0 && ovFlowCount == dc40){
			PORTB &= ~(1<<2); //turn on LED
			TCNT0 = 0;		//reset counter
			ovFlowCount = 0; //reset ov counter
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
			flag = 1;
  c0:	ef cf       	rjmp	.-34     	; 0xa0 <main+0x20>
		}
		else if(flag == 1 && ovFlowCount == dc60){
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	91 05       	cpc	r25, r1
  c6:	61 f7       	brne	.-40     	; 0xa0 <main+0x20>
  c8:	2b 31       	cpi	r18, 0x1B	; 27
  ca:	31 05       	cpc	r19, r1
  cc:	49 f7       	brne	.-46     	; 0xa0 <main+0x20>
			PORTB |= (1<<2); // turn off LED
  ce:	2a 9a       	sbi	0x05, 2	; 5
			TCNT0 = 0;		//reset counter
  d0:	16 bc       	out	0x26, r1	; 38
			ovFlowCount = 0; //reset ov counter
			flag = 0;
  d2:	87 2f       	mov	r24, r23
  d4:	96 2f       	mov	r25, r22
			flag = 1;
		}
		else if(flag == 1 && ovFlowCount == dc60){
			PORTB |= (1<<2); // turn off LED
			TCNT0 = 0;		//reset counter
			ovFlowCount = 0; //reset ov counter
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	e2 cf       	rjmp	.-60     	; 0xa0 <main+0x20>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
