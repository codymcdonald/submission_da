
CPE301_DA2C_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e1  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000256  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//60% = 0.435s. TCNT = 6796 = 1A8C
//40% = 0.29s. TCNT = 4530 = 11B2

int main(void)
{
	DDRB |= (1<<2)|(1<<5);		// Set all PORTB out
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	84 62       	ori	r24, 0x24	; 36
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);
  ac:	2d 9a       	sbi	0x05, 5	; 5
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0); //enable timer interrupts
  b4:	ee e6       	ldi	r30, 0x6E	; 110
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
	sei(); //enable interrupts
  be:	78 94       	sei
	TCNT0 = 0; //initialize clock
  c0:	16 bc       	out	0x26, r1	; 38
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x1c>

000000c4 <__vector_16>:
	
	while(1);
	
}

ISR(TIMER0_OVF_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
		ovFlowCount ++;
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		if (flag == 1 && ovFlowCount == dc40){
  e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  ec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	21 30       	cpi	r18, 0x01	; 1
  f2:	31 05       	cpc	r19, r1
  f4:	89 f4       	brne	.+34     	; 0x118 <__vector_16+0x54>
  f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dc40>
  fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <dc40+0x1>
  fe:	82 17       	cp	r24, r18
 100:	93 07       	cpc	r25, r19
 102:	f1 f4       	brne	.+60     	; 0x140 <__vector_16+0x7c>
			PORTB &= ~(1<<2);
 104:	2a 98       	cbi	0x05, 2	; 5
			ovFlowCount = 0;	//reset overflow counter
 106:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 10a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			flag = 0;
 10e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 112:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 116:	14 c0       	rjmp	.+40     	; 0x140 <__vector_16+0x7c>
		}
		else if (flag == 0 && ovFlowCount == dc60){
 118:	23 2b       	or	r18, r19
 11a:	91 f4       	brne	.+36     	; 0x140 <__vector_16+0x7c>
 11c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dc60>
 120:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dc60+0x1>
 124:	82 17       	cp	r24, r18
 126:	93 07       	cpc	r25, r19
 128:	59 f4       	brne	.+22     	; 0x140 <__vector_16+0x7c>
			PORTB |= (1<<2);
 12a:	2a 9a       	sbi	0x05, 2	; 5
			ovFlowCount = 0;	//reset overflow counter
 12c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 130:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
