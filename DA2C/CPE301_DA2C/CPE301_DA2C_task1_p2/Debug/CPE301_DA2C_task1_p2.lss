
CPE301_DA2C_task1_p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006aa  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

//TCNT FOR 1.25s = 19531.25. Overflow count = 77
int main(void){
	//initialize registers
	DDRB |= (1<<2)|(1<<5);		//set portb 2 to output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 62       	ori	r24, 0x24	; 36
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<2)|(1<<5);		//set pb2 to high
  86:	85 b1       	in	r24, 0x05	; 5
  88:	84 62       	ori	r24, 0x24	; 36
  8a:	85 b9       	out	0x05, r24	; 5
	DDRC &= (0<<2);		//set ddrc to input
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);		//set portc2 to low
  90:	88 b1       	in	r24, 0x08	; 8
  92:	88 b9       	out	0x08, r24	; 8
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
  94:	85 b5       	in	r24, 0x25	; 37
  96:	85 60       	ori	r24, 0x05	; 5
  98:	85 bd       	out	0x25, r24	; 37
	int ovFlowCount = 0;
	int ovCheck = 0;
	int delayCount = 77;		//amount of overflows to reach desired delay
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
  9a:	32 99       	sbic	0x06, 2	; 6
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <main+0x44>
		{
			PORTB &= ~(1<<2);		//if pressed then turn on led
  9e:	2a 98       	cbi	0x05, 2	; 5
			TCNT0 = 0;				//start counter at 0
  a0:	16 bc       	out	0x26, r1	; 38
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <main+0x3e>
			while(ovFlowCount <= delayCount ){
				ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
				if (ovCheck == 1){
  a8:	a8 99       	sbic	0x15, 0	; 21
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x34>
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			PORTB &= ~(1<<2);		//if pressed then turn on led
			TCNT0 = 0;				//start counter at 0
			while(ovFlowCount <= delayCount ){
  ac:	8e 34       	cpi	r24, 0x4E	; 78
  ae:	91 05       	cpc	r25, r1
  b0:	dc f3       	brlt	.-10     	; 0xa8 <main+0x28>
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x1a>
				ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
				if (ovCheck == 1){
					ovFlowCount ++;		//increase overflow count
  b4:	01 96       	adiw	r24, 0x01	; 1
					TIFR0 |= (1<<TOV0); //reset sreg flag
  b6:	a8 9a       	sbi	0x15, 0	; 21
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			PORTB &= ~(1<<2);		//if pressed then turn on led
			TCNT0 = 0;				//start counter at 0
			while(ovFlowCount <= delayCount ){
  b8:	8e 34       	cpi	r24, 0x4E	; 78
  ba:	91 05       	cpc	r25, r1
  bc:	71 f3       	breq	.-36     	; 0x9a <main+0x1a>
				ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
				if (ovCheck == 1){
  be:	a8 9b       	sbis	0x15, 0	; 21
  c0:	f3 cf       	rjmp	.-26     	; 0xa8 <main+0x28>
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <main+0x34>
				}
			}
			ovFlowCount = 0;
		}
		else {
			PORTB |= (1<<2);		//if not pressed then keep led off
  c4:	2a 9a       	sbi	0x05, 2	; 5
  c6:	e9 cf       	rjmp	.-46     	; 0x9a <main+0x1a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
