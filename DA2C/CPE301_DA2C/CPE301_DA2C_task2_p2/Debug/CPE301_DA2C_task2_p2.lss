
CPE301_DA2C_task2_p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006da  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000641  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int flag = 0;

//TCNT FOR 1.25s = 19531.25. Overflow count = 77
int main(void){
	//initialize registers
	DDRB |= (1<<2)|(1<<5);		//set portb 2 to output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	84 62       	ori	r24, 0x24	; 36
  94:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<2)|(1<<5);		//set pb2 to high
  96:	85 b1       	in	r24, 0x05	; 5
  98:	84 62       	ori	r24, 0x24	; 36
  9a:	85 b9       	out	0x05, r24	; 5
	DDRC &= (0<<2);		//set ddrc to input
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);		//set portc2 to low
  a0:	88 b1       	in	r24, 0x08	; 8
  a2:	88 b9       	out	0x08, r24	; 8
	TCCR0B |= (1<<CS00)|(1<<CS02);	// Set pre-scaler to 1024 
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37

	//int flag = 0;
	TIMSK0 |= (1<<TOIE0);		//enable timer interrupt
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24
	sei();			//enable interrupt
  b4:	78 94       	sei
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
		{
			flag = 1;		//if pressed then turn on led	
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
	//int flag = 0;
	TIMSK0 |= (1<<TOIE0);		//enable timer interrupt
	sei();			//enable interrupt
	
	while (1) {
		if (!(PINC & (1 << PINC2))) //check for button press
  ba:	32 99       	sbic	0x06, 2	; 6
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <main+0x38>
		{
			flag = 1;		//if pressed then turn on led	
  be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	f9 cf       	rjmp	.-14     	; 0xba <main+0x2a>
		}
		else {
			PORTB |= (1<<2);		//if not pressed then keep led off
  c8:	2a 9a       	sbi	0x05, 2	; 5
			flag = 0;		//keep flag off to keep from flase positives
  ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0x2a>

000000d4 <__vector_16>:
		}
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	int ovFlowCount = 0;
	int ovCheck = 0;
	int delayCount = 77;		//amount of overflows to reach desired delay

	if (flag == 1){
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	c1 f4       	brne	.+48     	; 0x11e <__vector_16+0x4a>
		PORTB &= ~(1<<2);
  ee:	2a 98       	cbi	0x05, 2	; 5
		TCNT0 = 0;				//start counter at 0
  f0:	16 bc       	out	0x26, r1	; 38
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
	int ovFlowCount = 0;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0b c0       	rjmp	.+22     	; 0x10e <__vector_16+0x3a>
	if (flag == 1){
		PORTB &= ~(1<<2);
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
  f8:	a8 99       	sbic	0x15, 0	; 21
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_16+0x30>
	int delayCount = 77;		//amount of overflows to reach desired delay

	if (flag == 1){
		PORTB &= ~(1<<2);
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
  fc:	8e 34       	cpi	r24, 0x4E	; 78
  fe:	91 05       	cpc	r25, r1
 100:	dc f3       	brlt	.-10     	; 0xf8 <__vector_16+0x24>
 102:	08 c0       	rjmp	.+16     	; 0x114 <__vector_16+0x40>
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
				ovFlowCount ++;		//increase overflow count
 104:	01 96       	adiw	r24, 0x01	; 1
				TIFR0 |= (1<<TOV0); //reset sreg flag
 106:	a8 9a       	sbi	0x15, 0	; 21
	int delayCount = 77;		//amount of overflows to reach desired delay

	if (flag == 1){
		PORTB &= ~(1<<2);
		TCNT0 = 0;				//start counter at 0
		while(ovFlowCount <= delayCount ){
 108:	8e 34       	cpi	r24, 0x4E	; 78
 10a:	91 05       	cpc	r25, r1
 10c:	19 f0       	breq	.+6      	; 0x114 <__vector_16+0x40>
			ovCheck = TIFR0 & 0x01;	//variable to check if overflow met.
			if (ovCheck == 1){
 10e:	a8 9b       	sbis	0x15, 0	; 21
 110:	f3 cf       	rjmp	.-26     	; 0xf8 <__vector_16+0x24>
 112:	f8 cf       	rjmp	.-16     	; 0x104 <__vector_16+0x30>
				ovFlowCount ++;		//increase overflow count
				TIFR0 |= (1<<TOV0); //reset sreg flag
			}
		}
		ovFlowCount = 0;
		PORTB |= (1<<2);
 114:	2a 9a       	sbi	0x05, 2	; 5
		flag = 0;
 116:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
