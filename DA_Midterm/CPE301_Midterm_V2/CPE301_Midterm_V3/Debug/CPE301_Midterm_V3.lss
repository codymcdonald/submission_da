
CPE301_Midterm_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008001c8  008001c8  000007f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e4  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000425  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3d       	cpi	r26, 0xD3	; 211
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
	}
	return 0;
}

void ADC_init(){
	ADMUX |= (1 << REFS0); // use AVcc as the reference
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24
	
	ADCSRA = (1 << ADEN)	// Enable the ADC(1 << ADPS2) 
  b6:	8b ee       	ldi	r24, 0xEB	; 235
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  bc:	08 95       	ret

000000be <usart_init>:
	|(1 << ADIE)	// Enable Interrupts
	|(1 << ADSC);	// Start ADC	
}

void usart_init() {
	UBRR0H = ((UBRR) >> 8);
  be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR;
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= (1<< U2X0); // Reduce divisor baud rate to 8
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0); // Enable USART transmitter
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set the data to 8 bits
  dc:	e2 ec       	ldi	r30, 0xC2	; 194
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <__vector_21>:
}
// ADC value Interrupt subroutine
ISR(ADC_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	25 97       	sbiw	r28, 0x05	; 5
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	char dummy[5];
	
	ADCdata = (ADCH << 1) * 1.8 + 32; // Convert Celsius to Fahrenheit
 118:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	07 2e       	mov	r0, r23
 124:	00 0c       	add	r0, r0
 126:	88 0b       	sbc	r24, r24
 128:	99 0b       	sbc	r25, r25
 12a:	0e 94 1e 02 	call	0x43c	; 0x43c <__floatsisf>
 12e:	26 e6       	ldi	r18, 0x66	; 102
 130:	36 e6       	ldi	r19, 0x66	; 102
 132:	46 ee       	ldi	r20, 0xE6	; 230
 134:	5f e3       	ldi	r21, 0x3F	; 63
 136:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	0e 94 81 01 	call	0x302	; 0x302 <__addsf3>
 146:	0e 94 ed 01 	call	0x3da	; 0x3da <__fixunssfsi>
 14a:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <__data_end>
	itoa(ADCdata, dummy, 10); //convert char to ascii
 14e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 152:	4a e0       	ldi	r20, 0x0A	; 10
 154:	be 01       	movw	r22, r28
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 17 03 	call	0x62e	; 0x62e <__itoa_ncheck>
 160:	fe 01       	movw	r30, r28
 162:	31 96       	adiw	r30, 0x01	; 1
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
		for(i = 0 ; i < 5 ; i++){
		temp[i] = dummy[i]; //move converted ascii
 168:	21 91       	ld	r18, Z+
 16a:	dc 01       	movw	r26, r24
 16c:	a7 53       	subi	r26, 0x37	; 55
 16e:	be 4f       	sbci	r27, 0xFE	; 254
 170:	2c 93       	st	X, r18
 172:	01 96       	adiw	r24, 0x01	; 1
	unsigned char i;
	char dummy[5];
	
	ADCdata = (ADCH << 1) * 1.8 + 32; // Convert Celsius to Fahrenheit
	itoa(ADCdata, dummy, 10); //convert char to ascii
		for(i = 0 ; i < 5 ; i++){
 174:	85 30       	cpi	r24, 0x05	; 5
 176:	91 05       	cpc	r25, r1
 178:	b9 f7       	brne	.-18     	; 0x168 <__vector_21+0x80>
		temp[i] = dummy[i]; //move converted ascii
	}
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <usart_send>:

void usart_send(volatile unsigned char data[]) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <usart_send+0x6>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	ac 01       	movw	r20, r24
	volatile unsigned char j;
	volatile unsigned char length = 0;
 1b6:	1a 82       	std	Y+2, r1	; 0x02
	
	while(data[length] != 0){
		length++; 
		for(j = 0 ; j < length ; j++)
		{
			while(!(UCSR0A & (1<<UDRE0)));	// UART
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = data[j];					// send char
 1bc:	66 ec       	ldi	r22, 0xC6	; 198
 1be:	70 e0       	ldi	r23, 0x00	; 0

void usart_send(volatile unsigned char data[]) {
	volatile unsigned char j;
	volatile unsigned char length = 0;
	
	while(data[length] != 0){
 1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <usart_send+0x4a>
		length++; 
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	8a 83       	std	Y+2, r24	; 0x02
		for(j = 0 ; j < length ; j++)
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	99 81       	ldd	r25, Y+1	; 0x01
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	98 17       	cp	r25, r24
 1d0:	88 f4       	brcc	.+34     	; 0x1f4 <usart_send+0x4a>
		{
			while(!(UCSR0A & (1<<UDRE0)));	// UART
 1d2:	90 81       	ld	r25, Z
 1d4:	95 ff       	sbrs	r25, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <usart_send+0x28>
			UDR0 = data[j];					// send char
 1d8:	99 81       	ldd	r25, Y+1	; 0x01
 1da:	da 01       	movw	r26, r20
 1dc:	a9 0f       	add	r26, r25
 1de:	b1 1d       	adc	r27, r1
 1e0:	9c 91       	ld	r25, X
 1e2:	db 01       	movw	r26, r22
 1e4:	9c 93       	st	X, r25
	volatile unsigned char j;
	volatile unsigned char length = 0;
	
	while(data[length] != 0){
		length++; 
		for(j = 0 ; j < length ; j++)
 1e6:	99 81       	ldd	r25, Y+1	; 0x01
 1e8:	9f 5f       	subi	r25, 0xFF	; 255
 1ea:	99 83       	std	Y+1, r25	; 0x01
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	29 17       	cp	r18, r25
 1f2:	78 f3       	brcs	.-34     	; 0x1d2 <usart_send+0x28>

void usart_send(volatile unsigned char data[]) {
	volatile unsigned char j;
	volatile unsigned char length = 0;
	
	while(data[length] != 0){
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	da 01       	movw	r26, r20
 1f8:	a8 0f       	add	r26, r24
 1fa:	b1 1d       	adc	r27, r1
 1fc:	8c 91       	ld	r24, X
 1fe:	81 11       	cpse	r24, r1
 200:	e0 cf       	rjmp	.-64     	; 0x1c2 <usart_send+0x18>
		{
			while(!(UCSR0A & (1<<UDRE0)));	// UART
			UDR0 = data[j];					// send char
		}
	}
}
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:


int main(void)
{
	// initialize modes
	ADC_init();		//initialize ADC
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	usart_init();	//initialize usart
 210:	0e 94 5f 00 	call	0xbe	; 0xbe <usart_init>
	sei();
 214:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	83 ed       	ldi	r24, 0xD3	; 211
 21a:	90 e3       	ldi	r25, 0x30	; 48
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x10>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x1a>
 226:	00 00       	nop
	
	// Establish initial connection the thingspeak
	_delay_ms(1000);
	usart_send(RESET);		//reset ESP
 228:	81 e1       	ldi	r24, 0x11	; 17
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	83 ed       	ldi	r24, 0xD3	; 211
 234:	90 e3       	ldi	r25, 0x30	; 48
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x2a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x34>
 240:	00 00       	nop
	_delay_ms(1000);
	usart_send(AT);			//confirm communication
 242:	82 ec       	ldi	r24, 0xC2	; 194
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	83 ed       	ldi	r24, 0xD3	; 211
 24e:	90 e3       	ldi	r25, 0x30	; 48
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x44>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x4e>
 25a:	00 00       	nop
	_delay_ms(1000);
	usart_send(CWMODE);		//WiFi mode = 3
 25c:	84 eb       	ldi	r24, 0xB4	; 180
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	83 ed       	ldi	r24, 0xD3	; 211
 268:	90 e3       	ldi	r25, 0x30	; 48
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x5e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x68>
 274:	00 00       	nop
	_delay_ms(1000);
	usart_send(CWJAP);		//Send wifi login
 276:	8a e8       	ldi	r24, 0x8A	; 138
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	83 ed       	ldi	r24, 0xD3	; 211
 282:	90 e3       	ldi	r25, 0x30	; 48
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x78>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x82>
 28e:	00 00       	nop
	_delay_ms(1000);
	usart_send(CIPMUX);		//Single connection point
 290:	83 e4       	ldi	r24, 0x43	; 67
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	83 ed       	ldi	r24, 0xD3	; 211
 29c:	90 e3       	ldi	r25, 0x30	; 48
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x92>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x9c>
 2a8:	00 00       	nop
	
	while (1)
	{
		_delay_ms(1000);
		usart_send(CIPSTART);	// Connect to ThingSpeak
 2aa:	81 e6       	ldi	r24, 0x61	; 97
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	90 e3       	ldi	r25, 0x30	; 48
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0xac>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0xb6>
 2c2:	00 00       	nop
		_delay_ms(1000);
		usart_send(CIPSEND);	// Declare send length 50
 2c4:	81 e5       	ldi	r24, 0x51	; 81
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	90 e3       	ldi	r25, 0x30	; 48
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0xc6>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0xd0>
 2dc:	00 00       	nop
		_delay_ms(1000);
		usart_send(SEND_DATA);	// Connect to proper key
 2de:	8a e1       	ldi	r24, 0x1A	; 26
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
		usart_send(temp);		// Send adc data
 2e6:	89 ec       	ldi	r24, 0xC9	; 201
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
		usart_send(CLOSE);		// close connection
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
		usart_send(LINEBREAK);	// line break
 2f6:	8e e0       	ldi	r24, 0x0E	; 14
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <usart_send>
 2fe:	cc cf       	rjmp	.-104    	; 0x298 <main+0x8c>

00000300 <__subsf3>:
 300:	50 58       	subi	r21, 0x80	; 128

00000302 <__addsf3>:
 302:	bb 27       	eor	r27, r27
 304:	aa 27       	eor	r26, r26
 306:	0e 94 98 01 	call	0x330	; 0x330 <__addsf3x>
 30a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_round>
 30e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_pscA>
 312:	38 f0       	brcs	.+14     	; 0x322 <__addsf3+0x20>
 314:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscB>
 318:	20 f0       	brcs	.+8      	; 0x322 <__addsf3+0x20>
 31a:	39 f4       	brne	.+14     	; 0x32a <__addsf3+0x28>
 31c:	9f 3f       	cpi	r25, 0xFF	; 255
 31e:	19 f4       	brne	.+6      	; 0x326 <__addsf3+0x24>
 320:	26 f4       	brtc	.+8      	; 0x32a <__addsf3+0x28>
 322:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_nan>
 326:	0e f4       	brtc	.+2      	; 0x32a <__addsf3+0x28>
 328:	e0 95       	com	r30
 32a:	e7 fb       	bst	r30, 7
 32c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_inf>

00000330 <__addsf3x>:
 330:	e9 2f       	mov	r30, r25
 332:	0e 94 81 02 	call	0x502	; 0x502 <__fp_split3>
 336:	58 f3       	brcs	.-42     	; 0x30e <__addsf3+0xc>
 338:	ba 17       	cp	r27, r26
 33a:	62 07       	cpc	r22, r18
 33c:	73 07       	cpc	r23, r19
 33e:	84 07       	cpc	r24, r20
 340:	95 07       	cpc	r25, r21
 342:	20 f0       	brcs	.+8      	; 0x34c <__addsf3x+0x1c>
 344:	79 f4       	brne	.+30     	; 0x364 <__addsf3x+0x34>
 346:	a6 f5       	brtc	.+104    	; 0x3b0 <__addsf3x+0x80>
 348:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_zero>
 34c:	0e f4       	brtc	.+2      	; 0x350 <__addsf3x+0x20>
 34e:	e0 95       	com	r30
 350:	0b 2e       	mov	r0, r27
 352:	ba 2f       	mov	r27, r26
 354:	a0 2d       	mov	r26, r0
 356:	0b 01       	movw	r0, r22
 358:	b9 01       	movw	r22, r18
 35a:	90 01       	movw	r18, r0
 35c:	0c 01       	movw	r0, r24
 35e:	ca 01       	movw	r24, r20
 360:	a0 01       	movw	r20, r0
 362:	11 24       	eor	r1, r1
 364:	ff 27       	eor	r31, r31
 366:	59 1b       	sub	r21, r25
 368:	99 f0       	breq	.+38     	; 0x390 <__addsf3x+0x60>
 36a:	59 3f       	cpi	r21, 0xF9	; 249
 36c:	50 f4       	brcc	.+20     	; 0x382 <__addsf3x+0x52>
 36e:	50 3e       	cpi	r21, 0xE0	; 224
 370:	68 f1       	brcs	.+90     	; 0x3cc <__addsf3x+0x9c>
 372:	1a 16       	cp	r1, r26
 374:	f0 40       	sbci	r31, 0x00	; 0
 376:	a2 2f       	mov	r26, r18
 378:	23 2f       	mov	r18, r19
 37a:	34 2f       	mov	r19, r20
 37c:	44 27       	eor	r20, r20
 37e:	58 5f       	subi	r21, 0xF8	; 248
 380:	f3 cf       	rjmp	.-26     	; 0x368 <__addsf3x+0x38>
 382:	46 95       	lsr	r20
 384:	37 95       	ror	r19
 386:	27 95       	ror	r18
 388:	a7 95       	ror	r26
 38a:	f0 40       	sbci	r31, 0x00	; 0
 38c:	53 95       	inc	r21
 38e:	c9 f7       	brne	.-14     	; 0x382 <__addsf3x+0x52>
 390:	7e f4       	brtc	.+30     	; 0x3b0 <__addsf3x+0x80>
 392:	1f 16       	cp	r1, r31
 394:	ba 0b       	sbc	r27, r26
 396:	62 0b       	sbc	r22, r18
 398:	73 0b       	sbc	r23, r19
 39a:	84 0b       	sbc	r24, r20
 39c:	ba f0       	brmi	.+46     	; 0x3cc <__addsf3x+0x9c>
 39e:	91 50       	subi	r25, 0x01	; 1
 3a0:	a1 f0       	breq	.+40     	; 0x3ca <__addsf3x+0x9a>
 3a2:	ff 0f       	add	r31, r31
 3a4:	bb 1f       	adc	r27, r27
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	c2 f7       	brpl	.-16     	; 0x39e <__addsf3x+0x6e>
 3ae:	0e c0       	rjmp	.+28     	; 0x3cc <__addsf3x+0x9c>
 3b0:	ba 0f       	add	r27, r26
 3b2:	62 1f       	adc	r22, r18
 3b4:	73 1f       	adc	r23, r19
 3b6:	84 1f       	adc	r24, r20
 3b8:	48 f4       	brcc	.+18     	; 0x3cc <__addsf3x+0x9c>
 3ba:	87 95       	ror	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f7 95       	ror	r31
 3c4:	9e 3f       	cpi	r25, 0xFE	; 254
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <__addsf3x+0x9a>
 3c8:	b0 cf       	rjmp	.-160    	; 0x32a <__addsf3+0x28>
 3ca:	93 95       	inc	r25
 3cc:	88 0f       	add	r24, r24
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__addsf3x+0xa2>
 3d0:	99 27       	eor	r25, r25
 3d2:	ee 0f       	add	r30, r30
 3d4:	97 95       	ror	r25
 3d6:	87 95       	ror	r24
 3d8:	08 95       	ret

000003da <__fixunssfsi>:
 3da:	0e 94 89 02 	call	0x512	; 0x512 <__fp_splitA>
 3de:	88 f0       	brcs	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e0:	9f 57       	subi	r25, 0x7F	; 127
 3e2:	98 f0       	brcs	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e4:	b9 2f       	mov	r27, r25
 3e6:	99 27       	eor	r25, r25
 3e8:	b7 51       	subi	r27, 0x17	; 23
 3ea:	b0 f0       	brcs	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3ec:	e1 f0       	breq	.+56     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a f0       	brmi	.+6      	; 0x3fe <__fixunssfsi+0x24>
 3f8:	ba 95       	dec	r27
 3fa:	c9 f7       	brne	.-14     	; 0x3ee <__fixunssfsi+0x14>
 3fc:	14 c0       	rjmp	.+40     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3fe:	b1 30       	cpi	r27, 0x01	; 1
 400:	91 f0       	breq	.+36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 402:	0e 94 a3 02 	call	0x546	; 0x546 <__fp_zero>
 406:	b1 e0       	ldi	r27, 0x01	; 1
 408:	08 95       	ret
 40a:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_zero>
 40e:	67 2f       	mov	r22, r23
 410:	78 2f       	mov	r23, r24
 412:	88 27       	eor	r24, r24
 414:	b8 5f       	subi	r27, 0xF8	; 248
 416:	39 f0       	breq	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	b9 3f       	cpi	r27, 0xF9	; 249
 41a:	cc f3       	brlt	.-14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 41c:	86 95       	lsr	r24
 41e:	77 95       	ror	r23
 420:	67 95       	ror	r22
 422:	b3 95       	inc	r27
 424:	d9 f7       	brne	.-10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 426:	3e f4       	brtc	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 428:	90 95       	com	r25
 42a:	80 95       	com	r24
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__floatunsisf>:
 438:	e8 94       	clt
 43a:	09 c0       	rjmp	.+18     	; 0x44e <__floatsisf+0x12>

0000043c <__floatsisf>:
 43c:	97 fb       	bst	r25, 7
 43e:	3e f4       	brtc	.+14     	; 0x44e <__floatsisf+0x12>
 440:	90 95       	com	r25
 442:	80 95       	com	r24
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8f 4f       	sbci	r24, 0xFF	; 255
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	99 23       	and	r25, r25
 450:	a9 f0       	breq	.+42     	; 0x47c <__floatsisf+0x40>
 452:	f9 2f       	mov	r31, r25
 454:	96 e9       	ldi	r25, 0x96	; 150
 456:	bb 27       	eor	r27, r27
 458:	93 95       	inc	r25
 45a:	f6 95       	lsr	r31
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f1 11       	cpse	r31, r1
 466:	f8 cf       	rjmp	.-16     	; 0x458 <__floatsisf+0x1c>
 468:	fa f4       	brpl	.+62     	; 0x4a8 <__floatsisf+0x6c>
 46a:	bb 0f       	add	r27, r27
 46c:	11 f4       	brne	.+4      	; 0x472 <__floatsisf+0x36>
 46e:	60 ff       	sbrs	r22, 0
 470:	1b c0       	rjmp	.+54     	; 0x4a8 <__floatsisf+0x6c>
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	16 c0       	rjmp	.+44     	; 0x4a8 <__floatsisf+0x6c>
 47c:	88 23       	and	r24, r24
 47e:	11 f0       	breq	.+4      	; 0x484 <__floatsisf+0x48>
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__floatsisf+0x6a>
 484:	77 23       	and	r23, r23
 486:	21 f0       	breq	.+8      	; 0x490 <__floatsisf+0x54>
 488:	9e e8       	ldi	r25, 0x8E	; 142
 48a:	87 2f       	mov	r24, r23
 48c:	76 2f       	mov	r23, r22
 48e:	05 c0       	rjmp	.+10     	; 0x49a <__floatsisf+0x5e>
 490:	66 23       	and	r22, r22
 492:	71 f0       	breq	.+28     	; 0x4b0 <__floatsisf+0x74>
 494:	96 e8       	ldi	r25, 0x86	; 134
 496:	86 2f       	mov	r24, r22
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	2a f0       	brmi	.+10     	; 0x4a8 <__floatsisf+0x6c>
 49e:	9a 95       	dec	r25
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	da f7       	brpl	.-10     	; 0x49e <__floatsisf+0x62>
 4a8:	88 0f       	add	r24, r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <__fp_inf>:
 4b2:	97 f9       	bld	r25, 7
 4b4:	9f 67       	ori	r25, 0x7F	; 127
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	08 95       	ret

000004be <__fp_nan>:
 4be:	9f ef       	ldi	r25, 0xFF	; 255
 4c0:	80 ec       	ldi	r24, 0xC0	; 192
 4c2:	08 95       	ret

000004c4 <__fp_pscA>:
 4c4:	00 24       	eor	r0, r0
 4c6:	0a 94       	dec	r0
 4c8:	16 16       	cp	r1, r22
 4ca:	17 06       	cpc	r1, r23
 4cc:	18 06       	cpc	r1, r24
 4ce:	09 06       	cpc	r0, r25
 4d0:	08 95       	ret

000004d2 <__fp_pscB>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	12 16       	cp	r1, r18
 4d8:	13 06       	cpc	r1, r19
 4da:	14 06       	cpc	r1, r20
 4dc:	05 06       	cpc	r0, r21
 4de:	08 95       	ret

000004e0 <__fp_round>:
 4e0:	09 2e       	mov	r0, r25
 4e2:	03 94       	inc	r0
 4e4:	00 0c       	add	r0, r0
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0xc>
 4e8:	88 23       	and	r24, r24
 4ea:	52 f0       	brmi	.+20     	; 0x500 <__fp_round+0x20>
 4ec:	bb 0f       	add	r27, r27
 4ee:	40 f4       	brcc	.+16     	; 0x500 <__fp_round+0x20>
 4f0:	bf 2b       	or	r27, r31
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0x18>
 4f4:	60 ff       	sbrs	r22, 0
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <__fp_round+0x20>
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <__fp_split3>:
 502:	57 fd       	sbrc	r21, 7
 504:	90 58       	subi	r25, 0x80	; 128
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	59 f0       	breq	.+22     	; 0x522 <__fp_splitA+0x10>
 50c:	5f 3f       	cpi	r21, 0xFF	; 255
 50e:	71 f0       	breq	.+28     	; 0x52c <__fp_splitA+0x1a>
 510:	47 95       	ror	r20

00000512 <__fp_splitA>:
 512:	88 0f       	add	r24, r24
 514:	97 fb       	bst	r25, 7
 516:	99 1f       	adc	r25, r25
 518:	61 f0       	breq	.+24     	; 0x532 <__fp_splitA+0x20>
 51a:	9f 3f       	cpi	r25, 0xFF	; 255
 51c:	79 f0       	breq	.+30     	; 0x53c <__fp_splitA+0x2a>
 51e:	87 95       	ror	r24
 520:	08 95       	ret
 522:	12 16       	cp	r1, r18
 524:	13 06       	cpc	r1, r19
 526:	14 06       	cpc	r1, r20
 528:	55 1f       	adc	r21, r21
 52a:	f2 cf       	rjmp	.-28     	; 0x510 <__fp_split3+0xe>
 52c:	46 95       	lsr	r20
 52e:	f1 df       	rcall	.-30     	; 0x512 <__fp_splitA>
 530:	08 c0       	rjmp	.+16     	; 0x542 <__fp_splitA+0x30>
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	99 1f       	adc	r25, r25
 53a:	f1 cf       	rjmp	.-30     	; 0x51e <__fp_splitA+0xc>
 53c:	86 95       	lsr	r24
 53e:	71 05       	cpc	r23, r1
 540:	61 05       	cpc	r22, r1
 542:	08 94       	sec
 544:	08 95       	ret

00000546 <__fp_zero>:
 546:	e8 94       	clt

00000548 <__fp_szero>:
 548:	bb 27       	eor	r27, r27
 54a:	66 27       	eor	r22, r22
 54c:	77 27       	eor	r23, r23
 54e:	cb 01       	movw	r24, r22
 550:	97 f9       	bld	r25, 7
 552:	08 95       	ret

00000554 <__mulsf3>:
 554:	0e 94 bd 02 	call	0x57a	; 0x57a <__mulsf3x>
 558:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_round>
 55c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_pscA>
 560:	38 f0       	brcs	.+14     	; 0x570 <__mulsf3+0x1c>
 562:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscB>
 566:	20 f0       	brcs	.+8      	; 0x570 <__mulsf3+0x1c>
 568:	95 23       	and	r25, r21
 56a:	11 f0       	breq	.+4      	; 0x570 <__mulsf3+0x1c>
 56c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_inf>
 570:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_nan>
 574:	11 24       	eor	r1, r1
 576:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_szero>

0000057a <__mulsf3x>:
 57a:	0e 94 81 02 	call	0x502	; 0x502 <__fp_split3>
 57e:	70 f3       	brcs	.-36     	; 0x55c <__mulsf3+0x8>

00000580 <__mulsf3_pse>:
 580:	95 9f       	mul	r25, r21
 582:	c1 f3       	breq	.-16     	; 0x574 <__mulsf3+0x20>
 584:	95 0f       	add	r25, r21
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	55 1f       	adc	r21, r21
 58a:	62 9f       	mul	r22, r18
 58c:	f0 01       	movw	r30, r0
 58e:	72 9f       	mul	r23, r18
 590:	bb 27       	eor	r27, r27
 592:	f0 0d       	add	r31, r0
 594:	b1 1d       	adc	r27, r1
 596:	63 9f       	mul	r22, r19
 598:	aa 27       	eor	r26, r26
 59a:	f0 0d       	add	r31, r0
 59c:	b1 1d       	adc	r27, r1
 59e:	aa 1f       	adc	r26, r26
 5a0:	64 9f       	mul	r22, r20
 5a2:	66 27       	eor	r22, r22
 5a4:	b0 0d       	add	r27, r0
 5a6:	a1 1d       	adc	r26, r1
 5a8:	66 1f       	adc	r22, r22
 5aa:	82 9f       	mul	r24, r18
 5ac:	22 27       	eor	r18, r18
 5ae:	b0 0d       	add	r27, r0
 5b0:	a1 1d       	adc	r26, r1
 5b2:	62 1f       	adc	r22, r18
 5b4:	73 9f       	mul	r23, r19
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	62 1f       	adc	r22, r18
 5bc:	83 9f       	mul	r24, r19
 5be:	a0 0d       	add	r26, r0
 5c0:	61 1d       	adc	r22, r1
 5c2:	22 1f       	adc	r18, r18
 5c4:	74 9f       	mul	r23, r20
 5c6:	33 27       	eor	r19, r19
 5c8:	a0 0d       	add	r26, r0
 5ca:	61 1d       	adc	r22, r1
 5cc:	23 1f       	adc	r18, r19
 5ce:	84 9f       	mul	r24, r20
 5d0:	60 0d       	add	r22, r0
 5d2:	21 1d       	adc	r18, r1
 5d4:	82 2f       	mov	r24, r18
 5d6:	76 2f       	mov	r23, r22
 5d8:	6a 2f       	mov	r22, r26
 5da:	11 24       	eor	r1, r1
 5dc:	9f 57       	subi	r25, 0x7F	; 127
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	9a f0       	brmi	.+38     	; 0x608 <__mulsf3_pse+0x88>
 5e2:	f1 f0       	breq	.+60     	; 0x620 <__mulsf3_pse+0xa0>
 5e4:	88 23       	and	r24, r24
 5e6:	4a f0       	brmi	.+18     	; 0x5fa <__mulsf3_pse+0x7a>
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	bb 1f       	adc	r27, r27
 5ee:	66 1f       	adc	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	a9 f7       	brne	.-22     	; 0x5e4 <__mulsf3_pse+0x64>
 5fa:	9e 3f       	cpi	r25, 0xFE	; 254
 5fc:	51 05       	cpc	r21, r1
 5fe:	80 f0       	brcs	.+32     	; 0x620 <__mulsf3_pse+0xa0>
 600:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_inf>
 604:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_szero>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	e4 f3       	brlt	.-8      	; 0x604 <__mulsf3_pse+0x84>
 60c:	98 3e       	cpi	r25, 0xE8	; 232
 60e:	d4 f3       	brlt	.-12     	; 0x604 <__mulsf3_pse+0x84>
 610:	86 95       	lsr	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	e7 95       	ror	r30
 61c:	9f 5f       	subi	r25, 0xFF	; 255
 61e:	c1 f7       	brne	.-16     	; 0x610 <__mulsf3_pse+0x90>
 620:	fe 2b       	or	r31, r30
 622:	88 0f       	add	r24, r24
 624:	91 1d       	adc	r25, r1
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	97 f9       	bld	r25, 7
 62c:	08 95       	ret

0000062e <__itoa_ncheck>:
 62e:	bb 27       	eor	r27, r27
 630:	4a 30       	cpi	r20, 0x0A	; 10
 632:	31 f4       	brne	.+12     	; 0x640 <__itoa_ncheck+0x12>
 634:	99 23       	and	r25, r25
 636:	22 f4       	brpl	.+8      	; 0x640 <__itoa_ncheck+0x12>
 638:	bd e2       	ldi	r27, 0x2D	; 45
 63a:	90 95       	com	r25
 63c:	81 95       	neg	r24
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	0c 94 23 03 	jmp	0x646	; 0x646 <__utoa_common>

00000644 <__utoa_ncheck>:
 644:	bb 27       	eor	r27, r27

00000646 <__utoa_common>:
 646:	fb 01       	movw	r30, r22
 648:	55 27       	eor	r21, r21
 64a:	aa 27       	eor	r26, r26
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	aa 1f       	adc	r26, r26
 652:	a4 17       	cp	r26, r20
 654:	10 f0       	brcs	.+4      	; 0x65a <__utoa_common+0x14>
 656:	a4 1b       	sub	r26, r20
 658:	83 95       	inc	r24
 65a:	50 51       	subi	r21, 0x10	; 16
 65c:	b9 f7       	brne	.-18     	; 0x64c <__utoa_common+0x6>
 65e:	a0 5d       	subi	r26, 0xD0	; 208
 660:	aa 33       	cpi	r26, 0x3A	; 58
 662:	08 f0       	brcs	.+2      	; 0x666 <__utoa_common+0x20>
 664:	a9 5d       	subi	r26, 0xD9	; 217
 666:	a1 93       	st	Z+, r26
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	79 f7       	brne	.-34     	; 0x64a <__utoa_common+0x4>
 66c:	b1 11       	cpse	r27, r1
 66e:	b1 93       	st	Z+, r27
 670:	11 92       	st	Z+, r1
 672:	cb 01       	movw	r24, r22
 674:	0c 94 3c 03 	jmp	0x678	; 0x678 <strrev>

00000678 <strrev>:
 678:	dc 01       	movw	r26, r24
 67a:	fc 01       	movw	r30, r24
 67c:	67 2f       	mov	r22, r23
 67e:	71 91       	ld	r23, Z+
 680:	77 23       	and	r23, r23
 682:	e1 f7       	brne	.-8      	; 0x67c <strrev+0x4>
 684:	32 97       	sbiw	r30, 0x02	; 2
 686:	04 c0       	rjmp	.+8      	; 0x690 <strrev+0x18>
 688:	7c 91       	ld	r23, X
 68a:	6d 93       	st	X+, r22
 68c:	70 83       	st	Z, r23
 68e:	62 91       	ld	r22, -Z
 690:	ae 17       	cp	r26, r30
 692:	bf 07       	cpc	r27, r31
 694:	c8 f3       	brcs	.-14     	; 0x688 <strrev+0x10>
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
