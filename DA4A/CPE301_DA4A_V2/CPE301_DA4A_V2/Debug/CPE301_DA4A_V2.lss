
CPE301_DA4A_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074b  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile unsigned int ADC_Val;			// holds value of ADC
int flag = 0;							// used to toggle

int main(void){
	//Set DDR's
	DDRB |= (1<<PB1)|(1<<PB5);		//PB1 and PB5 as outputs PB5 is the first LED
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 62       	ori	r24, 0x22	; 34
  94:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;						//PORTC as input	
  96:	17 b8       	out	0x07, r1	; 7
	PORTB = 0;						//reset portb to low
  98:	15 b8       	out	0x05, r1	; 5
	PORTC |= (1<<PC1);				//set PC1 high
  9a:	41 9a       	sbi	0x08, 1	; 8
	
	// Initialize Timer 1
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);	// Fast PWM, Non-inverted mode
  9c:	e0 e8       	ldi	r30, 0x80	; 128
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 6a       	ori	r24, 0xA2	; 162
  a4:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);		// Pre-scaler set to 8
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8a 61       	ori	r24, 0x1A	; 26
  ae:	80 83       	st	Z, r24
	ICR1 = 9999;									// Top of timer1 set to 9999
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	97 e2       	ldi	r25, 0x27	; 39
  b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	// Set interrupts
	PCICR = (1<<PCIE1);		//Enable PCINT
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1<<PCINT9);   //Set interrupt for PC1
  c2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	
	//Set up ADC
												
	ADMUX = (1<<REFS0);												// PC0 is input for ADC
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// enable ADC, system clock used for ADC
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 68       	ori	r24, 0x87	; 135
  d4:	80 83       	st	Z, r24
	ADCSRB = 0x0;													// free running mode
  d6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	DIDR0 = 0x1;													// Filter out any digital signals	
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	sei();			//Enable interrupts
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x52>

000000e4 <__vector_4>:
	while (1);		//infinite loop
}


//ISR for PC1
ISR(PCINT1_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 e6       	ldi	r24, 0x69	; 105
 106:	98 e1       	ldi	r25, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_4+0x24>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_4+0x2e>
 112:	00 00       	nop
	_delay_ms(500);	//Debounce delay. Button needs to be held to toggle
	if(!(PINC & (1 << PINC1))){
 114:	31 9b       	sbis	0x06, 1	; 6
 116:	36 c0       	rjmp	.+108    	; 0x184 <__vector_4+0xa0>
 118:	47 c0       	rjmp	.+142    	; 0x1a8 <__vector_4+0xc4>
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	31 f5       	brne	.+76     	; 0x174 <__vector_4+0x90>
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	82 62       	ori	r24, 0x22	; 34
 12c:	85 b9       	out	0x05, r24	; 5
				ADCSRA |= (1 << ADSC);				// start conversion
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
 134:	80 81       	ld	r24, Z
 136:	84 fd       	sbrc	r24, 4
 138:	2b c0       	rjmp	.+86     	; 0x190 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
 13a:	88 81       	ld	r24, Y
 13c:	99 81       	ldd	r25, Y+1	; 0x01
 13e:	93 70       	andi	r25, 0x03	; 3
 140:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADC_Val+0x1>
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADC_Val>
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADC_Val>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADC_Val+0x1>
 150:	9c 01       	movw	r18, r24
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	9c 93       	st	X, r25
 16a:	8e 93       	st	-X, r24
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
				ADCSRA |= (1 << ADSC);				// start conversion
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
 16c:	80 81       	ld	r24, Z
 16e:	84 ff       	sbrs	r24, 4
 170:	e4 cf       	rjmp	.-56     	; 0x13a <__vector_4+0x56>
 172:	0e c0       	rjmp	.+28     	; 0x190 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
				}				
			}
			else if(flag == 0){
 174:	89 2b       	or	r24, r25
 176:	61 f4       	brne	.+24     	; 0x190 <__vector_4+0xac>
				OCR1A = 0;					//reset 
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	1c 92       	st	X, r1
 17c:	1e 92       	st	-X, r1
				PORTB &= ~(1 << PORTB1);	
 17e:	29 98       	cbi	0x05, 1	; 5
				PORTB &= ~(1 << PORTB5);	//turn off OC1A and LED on
 180:	2d 98       	cbi	0x05, 5	; 5
 182:	06 c0       	rjmp	.+12     	; 0x190 <__vector_4+0xac>
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
					OCR1A = 10*ADC_Val;				// Calculate duty cycle
				}				
			}
			else if(flag == 0){
				OCR1A = 0;					//reset 
 184:	a8 e8       	ldi	r26, 0x88	; 136
 186:	b0 e0       	ldi	r27, 0x00	; 0
	_delay_ms(500);	//Debounce delay. Button needs to be held to toggle
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
			if(flag == 1){
				PORTB |= (1 << PORTB1) | (1 << PORTB5); //turn on OC1A and LED off
				ADCSRA |= (1 << ADSC);				// start conversion
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
				while((ADCSRA&(1<<ADIF))==0){		// wait for conversion to finish
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
 18c:	c8 e7       	ldi	r28, 0x78	; 120
 18e:	d0 e0       	ldi	r29, 0x00	; 0

//ISR for PC1
ISR(PCINT1_vect){
	_delay_ms(500);	//Debounce delay. Button needs to be held to toggle
	if(!(PINC & (1 << PINC1))){
		while(!(PINC & (1 << PINC1))){
 190:	31 9b       	sbis	0x06, 1	; 6
 192:	c3 cf       	rjmp	.-122    	; 0x11a <__vector_4+0x36>
				OCR1A = 0;					//reset 
				PORTB &= ~(1 << PORTB1);	
				PORTB &= ~(1 << PORTB5);	//turn off OC1A and LED on
			}
		}
		flag ^= 1;			//toggle	
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	82 27       	eor	r24, r18
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
