
CPE301_Midterm2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008001ca  008001ca  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001685  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000925  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000865  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  00003374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be9  00000000  00000000  00003927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3c       	cpi	r26, 0xCA	; 202
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ec       	ldi	r26, 0xCA	; 202
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3e       	cpi	r26, 0xEE	; 238
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  9e:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <init_APDS9960>:
	
	return 0;
}


void init_APDS9960(void){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	uint8_t setup;
	
	i2c_readReg(APDS9960_WRITE, APDS9960_ID, &setup,1);
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	ae 01       	movw	r20, r28
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	5f 4f       	sbci	r21, 0xFF	; 255
 246:	62 e9       	ldi	r22, 0x92	; 146
 248:	82 e7       	ldi	r24, 0x72	; 114
 24a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	if(setup != APDS9960_ID_1) while(1);
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	8b 3a       	cpi	r24, 0xAB	; 171
 252:	09 f0       	breq	.+2      	; 0x256 <init_APDS9960+0x24>
 254:	ff cf       	rjmp	.-2      	; 0x254 <init_APDS9960+0x22>
	setup = 1 << 1 | 1<<0 | 1<<3 | 1<<4;
 256:	8b e1       	ldi	r24, 0x1B	; 27
 258:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_ENABLE, &setup, 1);
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	ae 01       	movw	r20, r28
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	60 e8       	ldi	r22, 0x80	; 128
 266:	82 e7       	ldi	r24, 0x72	; 114
 268:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_ATIME;
 26c:	8b ed       	ldi	r24, 0xDB	; 219
 26e:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_ATIME, &setup, 1);
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	ae 01       	movw	r20, r28
 276:	4f 5f       	subi	r20, 0xFF	; 255
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	61 e8       	ldi	r22, 0x81	; 129
 27c:	82 e7       	ldi	r24, 0x72	; 114
 27e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_WTIME;
 282:	86 ef       	ldi	r24, 0xF6	; 246
 284:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_WTIME, &setup, 1);
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	ae 01       	movw	r20, r28
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	63 e8       	ldi	r22, 0x83	; 131
 292:	82 e7       	ldi	r24, 0x72	; 114
 294:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_PROX_PPULSE;
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_PPULSE, &setup, 1);
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	ae 01       	movw	r20, r28
 2a2:	4f 5f       	subi	r20, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	6e e8       	ldi	r22, 0x8E	; 142
 2a8:	82 e7       	ldi	r24, 0x72	; 114
 2aa:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_POFFSET_UR;
 2ae:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_POFFSET_UR, &setup, 1);
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	ae 01       	movw	r20, r28
 2b6:	4f 5f       	subi	r20, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	6d e9       	ldi	r22, 0x9D	; 157
 2bc:	82 e7       	ldi	r24, 0x72	; 114
 2be:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_POFFSET_DL;
 2c2:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_POFFSET_DL, &setup, 1);
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	ae 01       	movw	r20, r28
 2ca:	4f 5f       	subi	r20, 0xFF	; 255
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	6e e9       	ldi	r22, 0x9E	; 158
 2d0:	82 e7       	ldi	r24, 0x72	; 114
 2d2:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_CONFIG1;
 2d6:	80 e6       	ldi	r24, 0x60	; 96
 2d8:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG1, &setup, 1);
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	ae 01       	movw	r20, r28
 2e0:	4f 5f       	subi	r20, 0xFF	; 255
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	6d e8       	ldi	r22, 0x8D	; 141
 2e6:	82 e7       	ldi	r24, 0x72	; 114
 2e8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_PERS;
 2ec:	81 e1       	ldi	r24, 0x11	; 17
 2ee:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_PERS, &setup, 1);
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	ae 01       	movw	r20, r28
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	6c e8       	ldi	r22, 0x8C	; 140
 2fc:	82 e7       	ldi	r24, 0x72	; 114
 2fe:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_CONFIG2;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG2, &setup, 1);
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	ae 01       	movw	r20, r28
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	60 e9       	ldi	r22, 0x90	; 144
 312:	82 e7       	ldi	r24, 0x72	; 114
 314:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	setup = DEFAULT_CONFIG3;
 318:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG3, &setup, 1);
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	ae 01       	movw	r20, r28
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	6f e9       	ldi	r22, 0x9F	; 159
 326:	82 e7       	ldi	r24, 0x72	; 114
 328:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	
}
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <getValues>:
 

void getValues(void){
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	60 97       	sbiw	r28, 0x10	; 16
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
char dummy[10];


// Read red value
i2c_readReg(APDS9960_WRITE, APDS9960_RDATAH, &redVH, 1);
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	ae 01       	movw	r20, r28
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	67 e9       	ldi	r22, 0x97	; 151
 360:	82 e7       	ldi	r24, 0x72	; 114
 362:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_RDATAL, &redVL, 1);
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	ae 01       	movw	r20, r28
 36c:	4e 5f       	subi	r20, 0xFE	; 254
 36e:	5f 4f       	sbci	r21, 0xFF	; 255
 370:	66 e9       	ldi	r22, 0x96	; 150
 372:	82 e7       	ldi	r24, 0x72	; 114
 374:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>

// Read green value
i2c_readReg(APDS9960_WRITE, APDS9960_GDATAH, &greenVH, 1);
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	ae 01       	movw	r20, r28
 37e:	4d 5f       	subi	r20, 0xFD	; 253
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	69 e9       	ldi	r22, 0x99	; 153
 384:	82 e7       	ldi	r24, 0x72	; 114
 386:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_GDATAL, &greenVL, 1);
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	ae 01       	movw	r20, r28
 390:	4c 5f       	subi	r20, 0xFC	; 252
 392:	5f 4f       	sbci	r21, 0xFF	; 255
 394:	68 e9       	ldi	r22, 0x98	; 152
 396:	82 e7       	ldi	r24, 0x72	; 114
 398:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>

// Read blue value 
i2c_readReg(APDS9960_WRITE, APDS9960_BDATAH, &blueVH, 1);
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	ae 01       	movw	r20, r28
 3a2:	4b 5f       	subi	r20, 0xFB	; 251
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	6b e9       	ldi	r22, 0x9B	; 155
 3a8:	82 e7       	ldi	r24, 0x72	; 114
 3aa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_BDATAL, &blueVL, 1);
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	ae 01       	movw	r20, r28
 3b4:	4a 5f       	subi	r20, 0xFA	; 250
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255
 3b8:	6a e9       	ldi	r22, 0x9A	; 154
 3ba:	82 e7       	ldi	r24, 0x72	; 114
 3bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>

redVal = (redVH << 8) | redVL;
 3c0:	49 81       	ldd	r20, Y+1	; 0x01
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	54 2f       	mov	r21, r20
 3c6:	44 27       	eor	r20, r20
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	48 2b       	or	r20, r24
 3cc:	50 93 e1 01 	sts	0x01E1, r21	; 0x8001e1 <redVal+0x1>
 3d0:	40 93 e0 01 	sts	0x01E0, r20	; 0x8001e0 <redVal>
greenVal = (greenVH << 8) | greenVL;
 3d4:	2b 81       	ldd	r18, Y+3	; 0x03
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	32 2f       	mov	r19, r18
 3da:	22 27       	eor	r18, r18
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	28 2b       	or	r18, r24
 3e0:	30 93 df 01 	sts	0x01DF, r19	; 0x8001df <greenVal+0x1>
 3e4:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <greenVal>
blueVal = (blueVH << 8) | blueVL;
 3e8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	98 2f       	mov	r25, r24
 3ee:	88 27       	eor	r24, r24
 3f0:	6e 81       	ldd	r22, Y+6	; 0x06
 3f2:	86 2b       	or	r24, r22
 3f4:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <blueVal+0x1>
 3f8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <blueVal>

// Set max threshold values
if (redVal > 255){
 3fc:	4f 3f       	cpi	r20, 0xFF	; 255
 3fe:	51 05       	cpc	r21, r1
 400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	30 f0       	brcs	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
redVal = 255;
 404:	4f ef       	ldi	r20, 0xFF	; 255
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	50 93 e1 01 	sts	0x01E1, r21	; 0x8001e1 <redVal+0x1>
 40c:	40 93 e0 01 	sts	0x01E0, r20	; 0x8001e0 <redVal>
}
if (greenVal > 255){
 410:	2f 3f       	cpi	r18, 0xFF	; 255
 412:	31 05       	cpc	r19, r1
 414:	39 f0       	breq	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	30 f0       	brcs	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
greenVal = 255;
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	30 93 df 01 	sts	0x01DF, r19	; 0x8001df <greenVal+0x1>
 420:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <greenVal>
}
if (blueVal > 255){
 424:	8f 3f       	cpi	r24, 0xFF	; 255
 426:	91 05       	cpc	r25, r1
 428:	39 f0       	breq	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	30 f0       	brcs	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
blueVal = 255;
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <blueVal+0x1>
 434:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <blueVal>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 438:	8e 01       	movw	r16, r28
 43a:	09 5f       	subi	r16, 0xF9	; 249
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
 43e:	4a e0       	ldi	r20, 0x0A	; 10
 440:	b8 01       	movw	r22, r16
 442:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <redVal>
 446:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <redVal+0x1>
 44a:	0e 94 39 03 	call	0x672	; 0x672 <__itoa_ncheck>
 44e:	78 01       	movw	r14, r16
 450:	6e 01       	movw	r12, r28
 452:	81 e1       	ldi	r24, 0x11	; 17
 454:	c8 0e       	add	r12, r24
 456:	d1 1c       	adc	r13, r1
 458:	f8 01       	movw	r30, r16
 45a:	df 01       	movw	r26, r30
 45c:	ae 19       	sub	r26, r14
 45e:	bf 09       	sbc	r27, r15
}
	
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		RedStr[i] = dummy[i]; //move converted ascii
 460:	81 91       	ld	r24, Z+
 462:	ac 51       	subi	r26, 0x1C	; 28
 464:	be 4f       	sbci	r27, 0xFE	; 254
 466:	8c 93       	st	X, r24
if (blueVal > 255){
blueVal = 255;
}
	
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 468:	ec 15       	cp	r30, r12
 46a:	fd 05       	cpc	r31, r13
 46c:	b1 f7       	brne	.-20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 46e:	4a e0       	ldi	r20, 0x0A	; 10
 470:	be 01       	movw	r22, r28
 472:	69 5f       	subi	r22, 0xF9	; 249
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <greenVal>
 47a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <greenVal+0x1>
 47e:	0e 94 39 03 	call	0x672	; 0x672 <__itoa_ncheck>
 482:	f7 01       	movw	r30, r14
 484:	df 01       	movw	r26, r30
 486:	ae 19       	sub	r26, r14
 488:	bf 09       	sbc	r27, r15
		RedStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		GreenStr[i] = dummy[i]; //move converted ascii
 48a:	81 91       	ld	r24, Z+
 48c:	a6 53       	subi	r26, 0x36	; 54
 48e:	be 4f       	sbci	r27, 0xFE	; 254
 490:	8c 93       	st	X, r24
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		RedStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 492:	ec 15       	cp	r30, r12
 494:	fd 05       	cpc	r31, r13
 496:	b1 f7       	brne	.-20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	be 01       	movw	r22, r28
 49c:	69 5f       	subi	r22, 0xF9	; 249
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <blueVal>
 4a4:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <blueVal+0x1>
 4a8:	0e 94 39 03 	call	0x672	; 0x672 <__itoa_ncheck>
 4ac:	f7 01       	movw	r30, r14
 4ae:	df 01       	movw	r26, r30
 4b0:	ae 19       	sub	r26, r14
 4b2:	bf 09       	sbc	r27, r15
		GreenStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(blueVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		BlueStr[i] = dummy[i]; //move converted ascii
 4b4:	81 91       	ld	r24, Z+
 4b6:	ac 52       	subi	r26, 0x2C	; 44
 4b8:	be 4f       	sbci	r27, 0xFE	; 254
 4ba:	8c 93       	st	X, r24
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		GreenStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(blueVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 4bc:	ec 15       	cp	r30, r12
 4be:	fd 05       	cpc	r31, r13
 4c0:	b1 f7       	brne	.-20     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		BlueStr[i] = dummy[i]; //move converted ascii
	}
	
	
}
 4c2:	60 96       	adiw	r28, 0x10	; 16
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	08 95       	ret

000004e0 <usart_init>:

void usart_init() {
	UBRR0H = ((UBRR) >> 8);
 4e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR;
 4e4:	80 e1       	ldi	r24, 0x10	; 16
 4e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= (1<< U2X0); // divisor baud = 8
 4ea:	e0 ec       	ldi	r30, 0xC0	; 192
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	82 60       	ori	r24, 0x02	; 2
 4f2:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0); // Enable transmission
 4f4:	e1 ec       	ldi	r30, 0xC1	; 193
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	88 60       	ori	r24, 0x08	; 8
 4fc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // 8 bits
 4fe:	e2 ec       	ldi	r30, 0xC2	; 194
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	86 60       	ori	r24, 0x06	; 6
 506:	80 83       	st	Z, r24
 508:	08 95       	ret

0000050a <USART_putstring>:
}

void USART_putstring(volatile unsigned char *StringPtr)
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	dc 01       	movw	r26, r24
	while ((*StringPtr != '\0')){ // Until it reaches the end of the line, it will keep looping
 510:	8c 91       	ld	r24, X
 512:	88 23       	and	r24, r24
 514:	61 f0       	breq	.+24     	; 0x52e <USART_putstring+0x24>
		while (!(UCSR0A & (1 << UDRE0))); // Until UDRE0 goes high, it will keep looping
 516:	e0 ec       	ldi	r30, 0xC0	; 192
 518:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *StringPtr; // UDR0 register grabs the value given from the parameter
 51a:	c6 ec       	ldi	r28, 0xC6	; 198
 51c:	d0 e0       	ldi	r29, 0x00	; 0
}

void USART_putstring(volatile unsigned char *StringPtr)
{
	while ((*StringPtr != '\0')){ // Until it reaches the end of the line, it will keep looping
		while (!(UCSR0A & (1 << UDRE0))); // Until UDRE0 goes high, it will keep looping
 51e:	90 81       	ld	r25, Z
 520:	95 ff       	sbrs	r25, 5
 522:	fd cf       	rjmp	.-6      	; 0x51e <USART_putstring+0x14>
		UDR0 = *StringPtr; // UDR0 register grabs the value given from the parameter
 524:	8d 91       	ld	r24, X+
 526:	88 83       	st	Y, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // 8 bits
}

void USART_putstring(volatile unsigned char *StringPtr)
{
	while ((*StringPtr != '\0')){ // Until it reaches the end of the line, it will keep looping
 528:	8c 91       	ld	r24, X
 52a:	81 11       	cpse	r24, r1
 52c:	f8 cf       	rjmp	.-16     	; 0x51e <USART_putstring+0x14>
		while (!(UCSR0A & (1 << UDRE0))); // Until UDRE0 goes high, it will keep looping
		UDR0 = *StringPtr; // UDR0 register grabs the value given from the parameter
		StringPtr++; // but it does it by every character as shown here
	}
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <main>:

uint16_t redVal, greenVal, blueVal;


int main(void){
	i2c_init();
 534:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	usart_init(115200);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	72 ec       	ldi	r23, 0xC2	; 194
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 70 02 	call	0x4e0	; 0x4e0 <usart_init>
	init_APDS9960();
 544:	0e 94 19 01 	call	0x232	; 0x232 <init_APDS9960>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	83 ed       	ldi	r24, 0xD3	; 211
 54c:	90 e3       	ldi	r25, 0x30	; 48
 54e:	21 50       	subi	r18, 0x01	; 1
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <main+0x1a>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x24>
 558:	00 00       	nop

	//Start up Esp
	//Start AT communication
	_delay_ms(1000);
	USART_putstring(AT);					//send AT to the USART
 55a:	82 eb       	ldi	r24, 0xB2	; 178
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	83 ed       	ldi	r24, 0xD3	; 211
 566:	90 e3       	ldi	r25, 0x30	; 48
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x34>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x3e>
 572:	00 00       	nop

	//connect to network
	_delay_ms(1000);
	USART_putstring(RESET);		//reset ESP
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	83 ed       	ldi	r24, 0xD3	; 211
 580:	90 e3       	ldi	r25, 0x30	; 48
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x4e>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x58>
 58c:	00 00       	nop
	_delay_ms(1000);
	USART_putstring(AT);			//confirm communication
 58e:	82 eb       	ldi	r24, 0xB2	; 178
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	83 ed       	ldi	r24, 0xD3	; 211
 59a:	90 e3       	ldi	r25, 0x30	; 48
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x68>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x72>
 5a6:	00 00       	nop
	_delay_ms(1000);
	USART_putstring(CWMODE);		//WiFi mode = 3
 5a8:	84 ea       	ldi	r24, 0xA4	; 164
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	83 ed       	ldi	r24, 0xD3	; 211
 5b4:	90 e3       	ldi	r25, 0x30	; 48
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <main+0x82>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x8c>
 5c0:	00 00       	nop
	_delay_ms(1000);
	USART_putstring(CWJAP);		//Send wifi login
 5c2:	8a e7       	ldi	r24, 0x7A	; 122
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	83 ed       	ldi	r24, 0xD3	; 211
 5ce:	90 e3       	ldi	r25, 0x30	; 48
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x9c>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0xa6>
 5da:	00 00       	nop

	while(1){
		//getValues();

		_delay_ms(1000);
		USART_putstring(CIPMUX);		//Single connection point
 5dc:	82 e3       	ldi	r24, 0x32	; 50
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	83 ed       	ldi	r24, 0xD3	; 211
 5e8:	90 e3       	ldi	r25, 0x30	; 48
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0xb6>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0xc0>
 5f4:	00 00       	nop
		_delay_ms(1000);
		USART_putstring(CIPSTART);	// Connect to ThingSpeak
 5f6:	81 e5       	ldi	r24, 0x51	; 81
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	83 ed       	ldi	r24, 0xD3	; 211
 602:	90 e3       	ldi	r25, 0x30	; 48
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0xd0>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0xda>
 60e:	00 00       	nop
		_delay_ms(1000);
		USART_putstring(CIPSEND);	// Declare send length 50
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 618:	2f ef       	ldi	r18, 0xFF	; 255
 61a:	83 ed       	ldi	r24, 0xD3	; 211
 61c:	90 e3       	ldi	r25, 0x30	; 48
 61e:	21 50       	subi	r18, 0x01	; 1
 620:	80 40       	sbci	r24, 0x00	; 0
 622:	90 40       	sbci	r25, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <main+0xea>
 626:	00 c0       	rjmp	.+0      	; 0x628 <main+0xf4>
 628:	00 00       	nop
		_delay_ms(1000);
		getValues();
 62a:	0e 94 9a 01 	call	0x334	; 0x334 <getValues>
		USART_putstring(SEND_DATA);	// Connect to proper key
 62e:	89 e0       	ldi	r24, 0x09	; 9
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
		USART_putstring(RedStr);		// Send adc data
 636:	84 ee       	ldi	r24, 0xE4	; 228
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
		USART_putstring("&field2=");
 63e:	87 eb       	ldi	r24, 0xB7	; 183
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
		USART_putstring(GreenStr);		// Send adc data
 646:	8a ec       	ldi	r24, 0xCA	; 202
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
		USART_putstring("&field3=");
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
		USART_putstring(BlueStr);		// Send adc data
 656:	84 ed       	ldi	r24, 0xD4	; 212
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 85 02 	call	0x50a	; 0x50a <USART_putstring>
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	83 ed       	ldi	r24, 0xD3	; 211
 662:	90 e3       	ldi	r25, 0x30	; 48
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <main+0x130>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0x13a>
 66e:	00 00       	nop
 670:	ac cf       	rjmp	.-168    	; 0x5ca <main+0x96>

00000672 <__itoa_ncheck>:
 672:	bb 27       	eor	r27, r27
 674:	4a 30       	cpi	r20, 0x0A	; 10
 676:	31 f4       	brne	.+12     	; 0x684 <__itoa_ncheck+0x12>
 678:	99 23       	and	r25, r25
 67a:	22 f4       	brpl	.+8      	; 0x684 <__itoa_ncheck+0x12>
 67c:	bd e2       	ldi	r27, 0x2D	; 45
 67e:	90 95       	com	r25
 680:	81 95       	neg	r24
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	0c 94 45 03 	jmp	0x68a	; 0x68a <__utoa_common>

00000688 <__utoa_ncheck>:
 688:	bb 27       	eor	r27, r27

0000068a <__utoa_common>:
 68a:	fb 01       	movw	r30, r22
 68c:	55 27       	eor	r21, r21
 68e:	aa 27       	eor	r26, r26
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	aa 1f       	adc	r26, r26
 696:	a4 17       	cp	r26, r20
 698:	10 f0       	brcs	.+4      	; 0x69e <__utoa_common+0x14>
 69a:	a4 1b       	sub	r26, r20
 69c:	83 95       	inc	r24
 69e:	50 51       	subi	r21, 0x10	; 16
 6a0:	b9 f7       	brne	.-18     	; 0x690 <__utoa_common+0x6>
 6a2:	a0 5d       	subi	r26, 0xD0	; 208
 6a4:	aa 33       	cpi	r26, 0x3A	; 58
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <__utoa_common+0x20>
 6a8:	a9 5d       	subi	r26, 0xD9	; 217
 6aa:	a1 93       	st	Z+, r26
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	79 f7       	brne	.-34     	; 0x68e <__utoa_common+0x4>
 6b0:	b1 11       	cpse	r27, r1
 6b2:	b1 93       	st	Z+, r27
 6b4:	11 92       	st	Z+, r1
 6b6:	cb 01       	movw	r24, r22
 6b8:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <strrev>

000006bc <strrev>:
 6bc:	dc 01       	movw	r26, r24
 6be:	fc 01       	movw	r30, r24
 6c0:	67 2f       	mov	r22, r23
 6c2:	71 91       	ld	r23, Z+
 6c4:	77 23       	and	r23, r23
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <strrev+0x4>
 6c8:	32 97       	sbiw	r30, 0x02	; 2
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <strrev+0x18>
 6cc:	7c 91       	ld	r23, X
 6ce:	6d 93       	st	X+, r22
 6d0:	70 83       	st	Z, r23
 6d2:	62 91       	ld	r22, -Z
 6d4:	ae 17       	cp	r26, r30
 6d6:	bf 07       	cpc	r27, r31
 6d8:	c8 f3       	brcs	.-14     	; 0x6cc <strrev+0x10>
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
